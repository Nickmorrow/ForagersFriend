@page "/Profile"
@using ForagerSite.Services
@using DataAccess.Models
@using Utilities
@rendermode InteractiveServer
@inject UserService userService
@inject UserStateService userStateService
@inject UserFindService userFindService
@inject IConfiguration config

<h3>Profile</h3>

<div id="containers" style="display: flex; gap: 20px;">
    <div id="profile-container">
        <div id="profile-pic-container">
            
            @if (!editProfilePic)
            {
                <div>
                    <img src="@profileImageUrl" alt="Profile Picture" style="max-width: 400px;" />
                </div>
                <p style="cursor: pointer;"><a @onclick="EditProfilePic">Edit profile picture</a></p>
            } 
            else
            {
                <div>
                    @* @if (!string.IsNullOrEmpty(previewUrl))
                    {
                        <img src="@previewUrl" alt="Preview" style="max-width: 400px; margin-top: 10px;" />
                    } *@
                    <div>
                        <div>
                            <img src="@previewUrl" alt="Preview" style="max-width: 400px; margin-top: 10px;" />
                        </div>                       
                        <label for="profilePicture">Profile Picture:</label>
                        <InputFile type="file" id="profilePicture" OnChange="@(async e => await HandleFileChange(e))" />
                    </div>                                    
                    @if (errors.Any())
                    {
                        <ul>
                            @foreach (var error in errors)
                            {
                                <li><p style="color: red;">@error</p></li>
                            }
                        </ul>
                    }
                    <div>
                        <p style ="cursor: pointer;"><a @onclick="SaveProfilePic">Save Changes</a></p>
                        <p style="cursor: pointer;"><a @onclick="DeleteProfilePic">Delete</a></p>
                        <p style="cursor: pointer;"><a @onclick="CancelProfilePic">Cancel</a></p>
                    </div>
                </div>
            }
        </div>
        @if (!edit)
        {
            <div id="profile-details-container">
                <p><strong>User Name:</strong> @userVm.userSecurity.UssUsername</p>
                <p><strong>Name:</strong> @userVm.user.UsrName</p>
                <p><strong>Rank:</strong> @userVm.user.UsrExpScore</p>           
                <p><strong>Joined:</strong> @userVm.user.UsrJoinedDate.ToString("MMMM dd, yyyy")</p>
                <p><strong>Bio:</strong> @userVm.user.UsrBio</p>
                <p><strong>Country:</strong> @userVm.user.UsrCountry</p>
                <p><strong>State/Province:</strong> @userVm.user.UsrStateorProvince</p>
                <button @onclick="EditProfile">Edit</button>
            </div>
        }
        else
        {
            <div id="edit-profile-container">
                 <EditForm Model="userVm.user" OnValidSubmit="SaveChanges">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                            
                    <div> 
                        <label for="name">Name:</label> 
                        <InputText id="name" @bind-Value="userVm.user.UsrName" /> 
                    </div> 
                    <div> 
                        <label for="bio">Bio:</label> 
                        <InputTextArea id="bio" @bind-Value="userVm.user.UsrBio" />
                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => userVm.user.UsrBio)" />
                        @if (userVm.user.UsrBio?.Length > 250)
                        {
                            <p style="color: red;">Bio cannot exceed 250 characters.</p>
                        }
                    </div> 
                    <div> 
                        <label for="country">Country:</label> 
                        <InputText id="country" @bind-Value="userVm.user.UsrCountry" /> 
                    </div> 
                    <div> 
                        <label for="state">State/Province:</label> 
                        <InputText id="state" @bind-Value="userVm.user.UsrStateorProvince" /> 
                    </div> 
                    <div> 
                        <label for="zipcode">Zip Code:</label>
                        <InputNumber id="zipcode" @bind-Value="userVm.user.UsrZipCode" />
                        @if (!IsValidZipCode(userVm.user.UsrZipCode))
                        {
                            <p style="color: red;">Please enter a valid zip code.</p>
                        }
                    </div> 
                    <div> 
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="userVm.user.UsrEmail" />
                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => userVm.user.UsrEmail)" />
                        @if (string.IsNullOrWhiteSpace(userVm.user.UsrEmail))
                        {
                            <p style="color: red;">You must enter an Email address.</p>                    
                        }
                        @if (!IsValidEmail(userVm.user.UsrEmail) && !string.IsNullOrWhiteSpace(userVm.user.UsrEmail))
                        {
                            <p style="color: red;">Please enter a valid email address (e.g., example@domain.com).</p>
                        }                   
                        @if (userEmailExists)
                        {
                            <p style="color: red;">This email is already taken. Please choose a different one.</p>                       
                        }
                    </div>
                    <div>
                        <button type="submit">Save</button> 
                        <button type="button" @onclick="CancelEdit">Cancel</button>
                    </div>
            
                    @* @if (errorMessage != null)
                    {
                        <p style="color: red;">@errorMessage</p>
                    } *@
                </EditForm>
            </div>
        }
    </div>
    <div id="finds-container">
        <div>
            <h3 @onclick="UserFindsExpanded">Finds (@findsCount)</h3>        
        </div>
        <table>
            <tbody>
                @if (userFindsExpanded)
                {               
                    @foreach (FindDto find in userFindsViewModel.finds)
                    {
                        <tr style ="cursor: pointer;" @onclick="() => ToggleRowExpansion(find)" class="@GetRowClass(find)">
                            <td>
                                <div>
                                    <div >
                                        <p><strong>@find.findName</strong></p>
                                        <div>
                                            <img src="@find.findImages.FirstOrDefault().imageData" style="max-width: 100px;" />
                                            <p><strong>Discovered: </strong><span>@find.findDate.ToString("MMMM dd, yyyy")</span></p>
                                        </div>
                                    </div>                                                                                              
                                
                                    @if (IsRowExpanded(find))
                                    {
                                        <div>
                                            <p><strong>Image Gallery:</strong></p>
                                            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                                                @foreach (var image in find.findImages)
                                                {
                                                    <img src="@image.imageData" style="max-width: 100px;" />
                                                }
                                            </div>
                                        </div>
                                        <p><strong>Discovered: </strong><span>@find.findDate.ToString("MMMM dd, yyyy")</span></p>
                                        <p><strong>Species Name: </strong><span>@find.speciesName</span></p>
                                        <p><strong>Species Type: </strong><span>@find.speciesType</span></p>
                                        <p><strong>Species Category: </strong><span>@find.useCategory</span></p>
                                        <p><strong>Distinguishing Features: </strong><span>@find.features</span></p>
                                        <p><strong>Dangerous Lookalikes: </strong><span>@find.lookAlikes</span></p>                                   
                                        <p><strong>Harvest Method: </strong><span>@find.harvestMethod</span></p>
                                        <p><strong>Tastes like: </strong><span>@find.tastesLike</span></p>
                                        <p><strong>Notes: </strong><span>@find.description</span></p>
                                        <p><a></a>View on map</p>
                                        <div>
                                            <p><span>{Thumbs up}</span></p>
                                            <p><span>{Thumbs down}</span></p>
                                        </div> 
                                        <div>
                                            <p><span>Comments</span></p>
                                            <table>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>                                    
                                    }
                                </div>
                            </td>                                    
                        </tr>                   
                    }               
                }       
            </tbody>
        </table>
    </div>
    <div id="friends-container">
        <h3>Friends</h3>
        <table>
            <tbody>

            </tbody>
        </table>
    </div>
</div>
@code {
    #region Fields
    private UserViewModel userVm { get; set; } = new();

    private UserFindsViewModel userFindsViewModel { get; set; } = new();

    private User originalUser;

    private bool edit;

    private bool editProfilePic;

    private static readonly string PlaceholderImageUrl = $"UserProfileImages/Shared/PlaceHolder.jpeg";

    private static readonly long maxFileSize = 100 * 1024 * 1024; // 100MB

    private static readonly int maxAllowedFiles = 1;

    private List<string> errors  = new();

    private string errorMessage;

    private bool userEmailExists;

    private string previewUrl;

    private IBrowserFile? uploadedFile;

    private string profileImageUrl;

    private bool userFindsExpanded;

    private int findsCount;

    private static readonly List<string> allowedExtensions = new()
    {
        ".jpg", ".jpeg", ".png"
    };

    private Dictionary<FindDto, bool> expandedRows = new Dictionary<FindDto, bool>();
    #endregion
    #region Methods
    private void ToggleRowExpansion(FindDto item)
    {
        if (expandedRows.ContainsKey(item))
        {
            expandedRows[item] = !expandedRows[item];
        }
        else
        {
            expandedRows[item] = true;
        }
    }

    private bool IsRowExpanded(FindDto item)
    {
        return expandedRows.ContainsKey(item) && expandedRows[item];
    }

    private string GetRowClass(FindDto item)
    {
        return IsRowExpanded(item) ? "expanded" : "";
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var mailAddress = new System.Net.Mail.MailAddress(email);
            return mailAddress.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidZipCode(int? zipCode)
    {
        if (zipCode == null) return false;
        return zipCode >= 10000 && zipCode <= 99999; 
    }

    protected override async Task OnInitializedAsync()
    {
        userVm = userStateService.CurrentUser;
        userFindsViewModel = await userFindService.GetUserFindsViewModel(userVm.user.UsrId);       
        edit = false;
        editProfilePic = false;
        userFindsExpanded = false;
        profileImageUrl = await GetProfileImageUrl();
        findsCount = userFindsViewModel.finds.Count();
    }

    private async Task<string> GetProfileImageUrl()
    {
        string profilePicUrl = (await userService.GetUserProfilePic(userVm.user)) ?? string.Empty;

        return !string.IsNullOrEmpty(profilePicUrl)
            ? profilePicUrl
            : PlaceholderImageUrl;
    }

    private void EditProfilePic()
    {
        previewUrl = profileImageUrl;
        editProfilePic = true;
    }

    private void CancelProfilePic()
    {
        editProfilePic = false;
        uploadedFile = null;
        previewUrl = null;
        errors.Clear();
    }

    private void EditProfile()
    {
        originalUser = new User
            {
                UsrName = userVm.user.UsrName,
                UsrBio = userVm.user.UsrBio,
                UsrCountry = userVm.user.UsrCountry,
                UsrStateorProvince = userVm.user.UsrStateorProvince,
                UsrZipCode = userVm.user.UsrZipCode,
                UsrEmail = userVm.user.UsrEmail
            };

        edit = true;
    }

    private void CancelEdit() 
    { 
        userVm.user.UsrName = originalUser.UsrName;
        userVm.user.UsrBio = originalUser.UsrBio;
        userVm.user.UsrCountry = originalUser.UsrCountry;
        userVm.user.UsrStateorProvince = originalUser.UsrStateorProvince;
        userVm.user.UsrZipCode = originalUser.UsrZipCode;
        userVm.user.UsrEmail = originalUser.UsrEmail;

        edit = false; 
    }

    private async Task UserFindsExpanded()
    {
        userFindsExpanded = userFindsExpanded ? false : true;
    }

    private async Task SaveChanges() 
    { 
        try 
        { 
            errorMessage = null;
            userEmailExists = await userService.EmailExists(userVm.user.UsrEmail, userVm.user);

            if (string.IsNullOrWhiteSpace(userVm.user.UsrEmail))
            {
                return;
            }
            if (!IsValidEmail(userVm.user.UsrEmail))
            {
                return;
            }
            if (userEmailExists)
            {
                return;
            }

            await userService.UpdateUserAsync(userVm.user); 
            edit = false; 
        } 
        catch (Exception ex) 
        { 
            errors.Add($"Error saving changes: {ex.Message}"); 
        } 
    }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        (previewUrl, uploadedFile) = await PhotoUploadHelper.GeneratePreviewAsync(e, errors);
    }

    // private async Task HandleFileChange(InputFileChangeEventArgs e)
    // {
    //     errors.Clear();

    //     uploadedFile = e.File;

    //     if (e.FileCount > maxAllowedFiles)
    //     {
    //         errors.Add($"Error: Attempting to upload {e.FileCount} images, but only {maxAllowedFiles} image is allowed");
    //         return;
    //     }

    //     if (uploadedFile.Size > maxFileSize)
    //     {
    //         errors.Add($"File size exceeds the maximum allowed limit of {maxFileSize / (1024 * 1024)} MB.");
    //         return;
    //     }

    //     var fileExtension = Path.GetExtension(uploadedFile.Name).ToLowerInvariant();
    //     if (!allowedExtensions.Contains(fileExtension))
    //     {
    //         errors.Add("Only image files (JPG and PNG) are allowed.");
    //         return;
    //     }

    //     try
    //     {
    //         using var stream = uploadedFile.OpenReadStream(maxFileSize);
    //         var buffer = new byte[uploadedFile.Size];
    //         await stream.ReadAsync(buffer, 0, (int)uploadedFile.Size);
    //         previewUrl = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    //     }
    //     catch (Exception ex)
    //     {
    //         errors.Add($"Error generating preview: {ex.Message}");
    //     }
    // }
    private async Task SaveProfilePic()
    {
        if (errors.Any())
        {
            return; // Prevent saving if there are validation errors
        }

        var userName = userStateService.CurrentUser.userSecurity.UssUsername;

        var newUrl = await PhotoUploadHelper.UploadProfilePic(errors, userName, uploadedFile, config, userService, userVm);

        if (string.IsNullOrEmpty(newUrl))
            return;

        profileImageUrl = newUrl;

        if (errors.Contains("Error uploading file"))
        {
            return; // Prevent saving if there are errors
        }

        editProfilePic = false;
        uploadedFile = null;
        previewUrl = null;
        errors.Clear();
        profileImageUrl = await GetProfileImageUrl();

    }
    // private async Task SaveProfilePic()
    // {
    //     if (errors.Any())
    //     {
    //         return; // Prevent saving if there are validation errors
    //     }

    //     var userName = userStateService.CurrentUser.userSecurity.UssUsername;
    //     var file = uploadedFile; // Assume the file was saved during HandleFileChange
    //     var fileExtension = Path.GetExtension(file.Name).ToLowerInvariant();

    //     try
    //     {
    //         string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), fileExtension);
    //         string userDirectory = Path.Combine(config.GetValue<string>("FileStoragePf_Pics"), userName);
    //         string filePath = Path.Combine(userDirectory, newFileName);

    //         if (!Directory.Exists(userDirectory))
    //         {
    //             Directory.CreateDirectory(userDirectory);
    //         }
    //         // Remove existing files if the directory exists
    //         if (Directory.Exists(userDirectory))
    //         {
    //             var existingFiles = Directory.GetFiles(userDirectory);
    //             foreach (var existingFile in existingFiles)
    //             {
    //                 File.Delete(existingFile);
    //             }
    //         }
    //         // Save the new file
    //         await using var fs = new FileStream(filePath, FileMode.Create);
    //         await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

    //         // Generate file URL and update database
    //         string fileUrl = $"/UserProfileImages/{userName}/{newFileName}";
    //         await userService.UploadProfilePicUrl(userVm.user, fileUrl);

    //         editProfilePic = false;
    //         uploadedFile = null;
    //         previewUrl = null;
    //         errors.Clear();
    //         profileImageUrl = await GetProfileImageUrl();
    //     }
    //     catch (Exception ex)
    //     {
    //         errors.Add($"Error uploading file: {ex.Message}");
    //     }
    // }
    private async Task DeleteProfilePic()
    {

        var userName = userStateService.CurrentUser.userSecurity.UssUsername;

        PhotoUploadHelper.DeleteProfilePic(errors, userName, uploadedFile, config, userService, userVm);

        editProfilePic = false;
        uploadedFile = null;
        previewUrl = null;
        errors.Clear();
        profileImageUrl = await GetProfileImageUrl();
        

    }
    // private async Task DeleteProfilePic()
    // {

    //     var userName = userStateService.CurrentUser.userSecurity.UssUsername;
    //     var file = uploadedFile; // Assume the file was saved during HandleFileChange

    //     try
    //     {
    //         string userDirectory = Path.Combine(config.GetValue<string>("FileStoragePf_Pics"), userName);

    //         // Remove existing files if the directory exists
    //         if (Directory.Exists(userDirectory))
    //         {
    //             var existingFiles = Directory.GetFiles(userDirectory);
    //             foreach (var existingFile in existingFiles)
    //             {
    //                 File.Delete(existingFile);
    //             }
    //         }
    //         await userService.DeleteProfilePicUrl(userVm.user);

    //         editProfilePic = false;
    //         uploadedFile = null;
    //         previewUrl = null;
    //         errors.Clear();
    //         profileImageUrl = await GetProfileImageUrl();
    //     }
    //     catch (Exception ex)
    //     {

    //         errors.Add($"Error uploading file: {ex.Message}");
    //     }
    // }
#endregion
}
