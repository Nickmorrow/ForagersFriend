@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using ForagerSite.Services
@using ForagerSite.Utilities
@inject UserStateService userStateService
@inject IConfiguration config

<div>
<EditForm Model="findModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="findName">Name:</label>
        <InputText id="findName" @bind-Value="findModel.FindName" />
    </div>

    <div>
        <label for="speciesName">Species Name:</label>
        <InputText id="speciesName" @bind-Value="findModel.SpeciesName" />
    </div>

    <div>
        <label for="speciesType">Species Type:</label>
        <InputSelect id="speciesType" @bind-Value="findModel.SpeciesType">
            <option value="">Select Type</option>
            <option value="tree">Tree</option>
            <option value="mushroom">Mushroom</option>
            <option value="fruit">Fruit</option>
            <option value="herb">Herb</option>
        </InputSelect>
    </div>

    <div>
        <label for="useCategory">Use Category:</label>
        <InputSelect id="useCategory" @bind-Value="findModel.UseCategory">
            <option value="">Select Category</option>
            <option value="medicinal">Medicinal</option>
            <option value="gourmet">Gourmet</option>
            <option value="crafting">Crafting</option>
        </InputSelect>
    </div>

    <div>
        <label for="features">Distinguishing Features:</label>
        <InputText id="features" @bind-Value="findModel.Features" />
    </div>

    <div>
        <label for="lookAlikes">Dangerous Lookalikes:</label>
        <InputText id="lookAlikes" @bind-Value="findModel.LookAlikes" />
    </div>

    <div>
        <label for="harvestMethod">Harvest Method:</label>
        <InputText id="harvestMethod" @bind-Value="findModel.HarvestMethod" />
    </div>

    <div>
        <label for="tastesLike">Tastes Like:</label>
        <InputText id="tastesLike" @bind-Value="findModel.TastesLike" />
    </div>

    <div>
        <label for="description">Notes:</label>
        <InputTextArea id="description" @bind-Value="findModel.Description" />
    </div>

    <div>
        <label>Images:</label>
        <ImageUploader OnImagesUploaded="OnImagesUploaded" />
        <div style="display: flex; flex-wrap: wrap; gap: 10px;">
            @for (int i = 0; i < imagePreviews.Count; i++)
            {
                <div style="position: relative; display: inline-block;">
                    <img src="@imagePreviews[i]" style="max-width: 100px; max-height: 100px;" />
                    <button type="button"
                            @onclick="() => RemoveImage(i)"
                            style="position: absolute; top: -5px; right: -5px; background-color: red; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer;">
                        ✕
                    </button>
                </div>
            }
        </div>

        @if (uploadErrors.Any())
        {
            <ul style="color: red;">
                @foreach (var err in uploadErrors)
                {
                    <li>@err</li>
                }
            </ul>
        }

    </div>

    <button type="submit">Save</button>
</EditForm>
</div>
@code {
    private FindTemp findModel = new();

    private List<string> uploadErrors = new();

    private List<string> imagePreviews = new();

    [Parameter] public EventCallback<FindTemp> OnFindCreated { get; set; }

    private async Task OnImagesUploaded(List<string> base64Images)
    {
        imagePreviews = base64Images;
        findModel.ImageBase64Strings = base64Images;
    }

    private void RemoveImage(int index)
    {
        if (index >= 0 && index < imagePreviews.Count)
        {
            imagePreviews.RemoveAt(index);
            findModel.ImageBase64Strings.RemoveAt(index);
        }
    }

    private async Task HandleValidSubmit()
    {
        uploadErrors.Clear(); // ✅ Clear old errors first

        var userId = userStateService.CurrentUser.user.UsrId;
        var userName = userStateService.CurrentUser.userSecurity.UssUsername;
        findModel.UserId = userId;

        var uploadedUrls = await PhotoUploadHelper.UploadFindImages(findModel.ImageBase64Strings, userName, config, uploadErrors);

        if (uploadErrors.Any())
        {
            // ❌ Don't save if there are errors
            return;
        }

        findModel.ImageUrls = uploadedUrls;

        await OnFindCreated.InvokeAsync(findModel);

        findModel = new();
        imagePreviews.Clear();
    }



    public class FindTemp
    {
        [Required] public string FindName { get; set; }
        public string SpeciesName { get; set; }
        [Required] public string SpeciesType { get; set; }
        [Required] public string UseCategory { get; set; }
        public string Features { get; set; }
        public string LookAlikes { get; set; }
        public string HarvestMethod { get; set; }
        public string TastesLike { get; set; }
        public string Description { get; set; }
        public Guid UserId { get; set; }
        public List<string> ImageBase64Strings { get; set; } = new();
        public List<string> ImageUrls { get; set; } = new();
    }
}
